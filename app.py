import streamlit as st
import requests
from datetime import datetime
import pandas as pd
from collections import defaultdict
import altair as alt

API_KEY = ""
try:
    API_KEY = st.secrets["OPENWEATHER_API_KEY"]
    if not API_KEY:
        st.error("OPENWEATHER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ö Streamlit. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")
        st.stop()
except KeyError:
    st.error("OPENWEATHER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ö Streamlit. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")
    st.stop()


def get_weather_data(lat, lon):
    url = "http://api.openweathermap.org/data/2.5/forecast"
    params = {
        "lat": lat,
        "lon": lon,
        "units": "metric",
        "lang": "ru",
        "appid": API_KEY
    }
    response = requests.get(url, params=params)
    response.raise_for_status()
    return response.json()


st.title("üå¶Ô∏è –ü–æ–≥–æ–¥–∞")

# –ü–µ—Ä–µ–Ω–æ—Å –≤–≤–æ–¥–∞ –ª–æ–∫–∞—Ü–∏–π –≤ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
st.sidebar.title("–í–≤–æ–¥ –ª–æ–∫–∞—Ü–∏–π")
locations = {}
for i in range(1, 5):
    st.sidebar.subheader(f"–õ–æ–∫–∞—Ü–∏—è {i}")
    name = st.sidebar.text_input(f"–ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ {i}:", value=f"–ú–µ—Å—Ç–æ {i}", key=f"name_{i}")
    lat = st.sidebar.number_input(f"–®–∏—Ä–æ—Ç–∞ {i}:", value=55.75, format="%.6f", key=f"lat_{i}")
    lon = st.sidebar.number_input(f"–î–æ–ª–≥–æ—Ç–∞ {i}:", value=37.61, format="%.6f", key=f"lon_{i}")
    locations[name] = (lat, lon)

# –í—ã–±–æ—Ä –ª–æ–∫–∞—Ü–∏–π
st.markdown("---")
selected_locations = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã:", options=list(locations.keys()))

if selected_locations:
    if st.button("–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π"):
        with st.spinner("–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ..."):
            all_data = []
            error_messages = []
            
            for name in selected_locations:
                lat, lon = locations[name]
                try:
                    data = get_weather_data(lat, lon)
                    forecast_list = data["list"]
                    current = forecast_list[0]
                    
                    # –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞
                    current_data = {
                        "–õ–æ–∫–∞—Ü–∏—è": name,
                        "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞": current['main']['temp'],
                        "–í–µ—Ç–µ—Ä": current['wind']['speed'],
                        "–î–∞–≤–ª–µ–Ω–∏–µ": round(current['main']['pressure'] * 0.75006),
                        "–û–±–ª–∞—á–Ω–æ—Å—Ç—å": current['clouds']['all'],
                        "–î–æ–∂–¥—å": current.get('rain', {}).get('3h', 0),
                        "–°–Ω–µ–≥": current.get('snow', {}).get('3h', 0)
                    }
                    
                    # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è
                    grouped = defaultdict(list)
                    for entry in forecast_list:
                        date_str = entry["dt_txt"].split(" ")[0]
                        grouped[date_str].append(entry)
                        
                    dates = sorted(grouped.keys())
                    forecast_days = dates[1:4] if len(dates) >= 4 else dates[1:]
                    
                    for i, day in enumerate(forecast_days):
                        day_data = grouped[day]
                        temps = [x["main"]["temp"] for x in day_data]
                        clouds = [x["clouds"]["all"] for x in day_data]
                        pops = [x.get("pop", 0) for x in day_data]
                        
                        current_data[f"–î–µ–Ω—å {i+1} –ú–∞–∫—Å"] = max(temps)
                        current_data[f"–î–µ–Ω—å {i+1} –ú–∏–Ω"] = min(temps)
                        current_data[f"–î–µ–Ω—å {i+1} –û–±–ª–∞—á–Ω–æ—Å—Ç—å"] = int(sum(clouds)/len(clouds))
                        current_data[f"–î–µ–Ω—å {i+1} –û—Å–∞–¥–∫–∏"] = int(max(pops)*100)
                    
                    all_data.append(current_data)
                    
                except Exception as e:
                    error_messages.append(f"–û—à–∏–±–∫–∞ –≤ {name}: {str(e)}")
            
            # –í—ã–≤–æ–¥ –æ—à–∏–±–æ–∫
            for error in error_messages:
                st.error(error)
                
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É
            if all_data:
                df = pd.DataFrame(all_data)
                st.table(df.set_index("–õ–æ–∫–∞—Ü–∏—è"))
                
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
                forecast_data = []
                for idx, row in df.iterrows():
                    for day in [1, 2, 3]:
                        if f"–î–µ–Ω—å {day} –ú–∞–∫—Å" in row:
                            forecast_data.append({
                                "–õ–æ–∫–∞—Ü–∏—è": idx,
                                "–î–µ–Ω—å": f"–î–µ–Ω—å {day}",
                                "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": "–ú–∞–∫—Å.—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞",
                                "–ó–Ω–∞—á–µ–Ω–∏–µ": row[f"–î–µ–Ω—å {day} –ú–∞–∫—Å"]
                            })
                            forecast_data.append({
                                "–õ–æ–∫–∞—Ü–∏—è": idx,
                                "–î–µ–Ω—å": f"–î–µ–Ω—å {day}",
                                "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": "–ú–∏–Ω.—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞",
                                "–ó–Ω–∞—á–µ–Ω–∏–µ": row[f"–î–µ–Ω—å {day} –ú–∏–Ω"]
                            })
                        if f"–î–µ–Ω—å {day} –û–±–ª–∞—á–Ω–æ—Å—Ç—å" in row:
                            forecast_data.append({
                                "–õ–æ–∫–∞—Ü–∏—è": idx,
                                "–î–µ–Ω—å": f"–î–µ–Ω—å {day}",
                                "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": "–û–±–ª–∞—á–Ω–æ—Å—Ç—å",
                                "–ó–Ω–∞—á–µ–Ω–∏–µ": row[f"–î–µ–Ω—å {day} –û–±–ª–∞—á–Ω–æ—Å—Ç—å"]
                            })
                        if f"–î–µ–Ω—å {day} –û—Å–∞–¥–∫–∏" in row:
                            forecast_data.append({
                                "–õ–æ–∫–∞—Ü–∏—è": idx,
                                "–î–µ–Ω—å": f"–î–µ–Ω—å {day}",
                                "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤",
                                "–ó–Ω–∞—á–µ–Ω–∏–µ": row[f"–î–µ–Ω—å {day} –û—Å–∞–¥–∫–∏"]
                            })
                
                if forecast_data:
                    df_forecast = pd.DataFrame(forecast_data)
                    
                    # –ì—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –º–µ—Ç—Ä–∏–∫–∏
                    metrics = ["—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "–û–±–ª–∞—á–Ω–æ—Å—Ç—å", "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤"]
                    for metric in metrics:
                        metric_data = df_forecast[df_forecast['–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å'].str.contains(metric)]
                        if not metric_data.empty:
                            chart = alt.Chart(metric_data).mark_bar().encode(
                                x=alt.X('–î–µ–Ω—å:N', title='–î–µ–Ω—å –ø—Ä–æ–≥–Ω–æ–∑–∞'),
                                y=alt.Y('sum(–ó–Ω–∞—á–µ–Ω–∏–µ):Q', title='–ó–Ω–∞—á–µ–Ω–∏–µ'),
                                color='–õ–æ–∫–∞—Ü–∏—è:N',
                                column='–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å:N'
                            ).properties(
                                width=200,
                                height=300,
                                title=f"{metric.capital()} –ø–æ –ª–æ–∫–∞—Ü–∏—è–º"
                            )
                            st.altair_chart(chart)
