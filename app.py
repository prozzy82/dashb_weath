import streamlit as st
import requests
from datetime import datetime
import pandas as pd
import altair as alt
from collections import defaultdict

# --- –ö–ª—é—á API ---
API_KEY = ""
try:
    # –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞ –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤ Streamlit
    API_KEY = st.secrets["OPENWEATHER_API_KEY"]
    if not API_KEY:
        st.error("–ö–ª—é—á OPENWEATHER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ö Streamlit. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")
        st.stop()
except (KeyError, FileNotFoundError):
    st.error("–ö–ª—é—á OPENWEATHER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ö Streamlit. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")
    st.stop()


# --- –§—É–Ω–∫—Ü–∏–∏ ---

def get_weather_data(lat, lon):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ —Å API OpenWeatherMap."""
    url = "http://api.openweathermap.org/data/2.5/forecast"
    params = {
        "lat": lat,
        "lon": lon,
        "units": "metric",
        "lang": "ru",
        "appid": API_KEY
    }
    response = requests.get(url, params=params)
    response.raise_for_status()
    return response.json()

def map_time_to_period(hour):
    """–°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç —á–∞—Å —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫."""
    if 5 <= hour < 12:
        return "–£—Ç—Ä–æ"
    elif 12 <= hour < 18:
        return "–î–µ–Ω—å"
    elif 18 <= hour < 23:
        return "–í–µ—á–µ—Ä"
    else:
        return "–ù–æ—á—å"

def degrees_to_cardinal(d):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≥—Ä–∞–¥—É—Å—ã –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞."""
    dirs = ["–°", "–°–°–í", "–°–í", "–í–°–í", "–í", "–í–Æ–í", "–Æ–í", "–Æ–Æ–í", "–Æ", "–Æ–Æ–ó", "–Æ–ó", "–ó–Æ–ó", "–ó", "–ó–°–ó", "–°–ó", "–°–°–ó"]
    ix = int(round(d / (360. / len(dirs))))
    return dirs[ix % len(dirs)]


# --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---

st.title("üå¶Ô∏è –ü–æ–≥–æ–¥–∞")

# –°–∞–π–¥–±–∞—Ä –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
with st.sidebar:
    st.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–æ–∫–∞—Ü–∏–π")
    locations = {}
    # –ü—Ä–∏–º–µ—Ä –ª–æ–∫–∞—Ü–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    default_locs = {
        "–û–º—Å–∫, –ë–µ—Ä–µ–∑–æ–≤.-–ö—Ä–∞—Å–Ω—ã–π –ü.": (55.012597, 73.331728),
        "–û–º—Å–∫, –ë–µ—Ä–µ–∑–æ–≤–∞—è —Ä–æ—â–∞": (55.064546, 73.397613),
        "–û–º—Å–∫, –î–∞—á–∞": (55.064546, 73.397613)
    }
    
    for i in range(1, 4):
        st.subheader(f"–õ–æ–∫–∞—Ü–∏—è {i}")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_name = list(default_locs.keys())[i-1]
        default_lat, default_lon = default_locs[default_name]
        
        name = st.text_input(f"–ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ {i}:", value=default_name, key=f"name_{i}")
        lat = st.number_input(f"–®–∏—Ä–æ—Ç–∞ {i}:", value=default_lat, format="%.6f", key=f"lat_{i}")
        lon = st.number_input(f"–î–æ–ª–≥–æ—Ç–∞ {i}:", value=default_lon, format="%.6f", key=f"lon_{i}")
        locations[name] = (lat, lon)

    st.markdown("---")
    selected_locations = st.multiselect(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã:",
        options=list(locations.keys()),
        default=list(locations.keys()) # –í—ã–±—Ä–∞—Ç—å –≤—Å–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    )

if selected_locations:
    if st.button("–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π"):
        with st.spinner("–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ..."):
            for name in selected_locations:
                lat, lon = locations[name]
                st.markdown(f"---")
                st.subheader(f"üìç –ü–æ–≥–æ–¥–∞ –≤ {name}")
                try:
                    data = get_weather_data(lat, lon)
                    forecast_list = data["list"]

                    # –ë–ª–æ–∫ —Å —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥–æ–π
                    st.subheader("‚òÄÔ∏è –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞")
                    current = forecast_list[0]
                    col1, col2 = st.columns(2)
                    col1.metric("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", f"{current['main']['temp']} ¬∞C")
                    col1.metric("–í–µ—Ç–µ—Ä", f"{current['wind']['speed']} –º/—Å")
                    col2.metric("–î–∞–≤–ª–µ–Ω–∏–µ", f"{round(current['main']['pressure'] * 0.75006)} –º–º —Ä—Ç. —Å—Ç.")
                    col2.metric("–û–±–ª–∞—á–Ω–æ—Å—Ç—å", f"{current['clouds']['all']} %")


                    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –¢–ê–ë–õ–ò–¶–ê –ù–ê 2 –î–ù–Ø (16 –ó–ê–ü–ò–°–ï–ô) ---
                    st.subheader("üóìÔ∏è –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 2 –¥–Ω—è")
                    
                    table_data = []
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ü–∏–∫–ª –ø–µ—Ä–≤—ã–º–∏ 16 –∑–∞–ø–∏—Å—è–º–∏ (8 –∑–∞–ø–∏—Å–µ–π/–¥–µ–Ω—å * 2 –¥–Ω—è)
                    for entry in forecast_list[:16]:
                        dt_object = datetime.strptime(entry["dt_txt"], "%Y-%m-%d %H:%M:%S")
                        
                        table_data.append({
                            "–î–∞—Ç–∞": dt_object.strftime("%d.%m"),
                            "–í—Ä–µ–º—è": f"{dt_object.strftime('%H:%M')}, {map_time_to_period(dt_object.hour)}",
                            "–Ø–≤–ª–µ–Ω–∏—è": entry["weather"][0]["description"].capitalize(),
                            "–¢–µ–º–ø., ¬∞C": round(entry["main"]["temp"]),
                            "–î–∞–≤–ª–µ–Ω–∏–µ": round(entry['main']['pressure'] * 0.75006),
                            "–í–µ—Ç–µ—Ä, –º/—Å": f"{degrees_to_cardinal(entry['wind']['deg'])}; {round(entry['wind']['speed'])}",
                            "–í–ª–∞–∂–Ω–æ—Å—Ç—å, %": entry["main"]["humidity"]
                        })
                    
                    df_forecast = pd.DataFrame(table_data)
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –¥–ª—è 16 —Å—Ç—Ä–æ–∫
                    table_height = (16 + 1) * 35
                    st.dataframe(
                        df_forecast, 
                        use_container_width=True, 
                        hide_index=True, 
                        height=table_height
                    )

                    # --- –ì–†–ê–§–ò–ö–ò ---
                    st.subheader("üìä –ì—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞")
                    grouped = defaultdict(list)
                    for entry in forecast_list:
                        date_str = entry["dt_txt"].split(" ")[0]
                        grouped[date_str].append(entry)
                    
                    forecast_days = sorted(grouped.keys())

                    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
                    temp_records = []
                    wind_records = []
                    pop_records = []

                    for date in forecast_days:
                        day_data = grouped[date]
                        temps = [x["main"]["temp"] for x in day_data]
                        wind_speeds = [x["wind"]["speed"] for x in day_data]
                        pops = [x.get("pop", 0) for x in day_data]

                        if not temps: continue

                        temp_day = max(temps)
                        temp_night = min(temps)
                        
                        temp_records.append({"–î–∞—Ç–∞": date, "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞": temp_day, "–í—Ä–µ–º—è —Å—É—Ç–æ–∫": "–î–µ–Ω—å"})
                        temp_records.append({"–î–∞—Ç–∞": date, "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞": temp_night, "–í—Ä–µ–º—è —Å—É—Ç–æ–∫": "–ù–æ—á—å"})
                        wind_records.append({"–î–∞—Ç–∞": date, "–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞": sum(wind_speeds) / len(wind_speeds)})
                        pop_records.append({"–î–∞—Ç–∞": date, "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤": int(max(pops) * 100)})

                    # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame'–æ–≤ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
                    df_temp = pd.DataFrame(temp_records)
                    df_wind = pd.DataFrame(wind_records)
                    df_pop = pd.DataFrame(pop_records)

                    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
                    chart_temp = alt.Chart(df_temp).mark_line(point=True).encode(
                        x=alt.X('–î–∞—Ç–∞', title='–î–∞—Ç–∞'),
                        y=alt.Y('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', title='–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, ¬∞C'),
                        color='–í—Ä–µ–º—è —Å—É—Ç–æ–∫',
                        tooltip=['–î–∞—Ç–∞', '–í—Ä–µ–º—è —Å—É—Ç–æ–∫', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞']
                    ).properties(title='–î–∏–Ω–∞–º–∏–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã')

                    chart_wind = alt.Chart(df_wind).mark_line(point=True, color='green').encode(
                        x=alt.X('–î–∞—Ç–∞', title='–î–∞—Ç–∞'),
                        y=alt.Y('–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞', title='–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞, –º/—Å'),
                        tooltip=['–î–∞—Ç–∞', '–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞']
                    )

                    chart_pop = alt.Chart(df_pop).mark_bar(size=15, opacity=0.7, color='blue').encode(
                        x=alt.X('–î–∞—Ç–∞', title='–î–∞—Ç–∞'),
                        y=alt.Y('–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤', title='–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤, %'),
                        tooltip=['–î–∞—Ç–∞', '–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤']
                    ).properties(title='–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤')

                    combined_chart = alt.vconcat(
                        chart_temp,
                        chart_wind,
                        chart_pop
                    ).resolve_scale(
                        x='shared'
                    )
                    st.altair_chart(combined_chart, use_container_width=True)

                except requests.exceptions.HTTPError as e:
                    if e.response.status_code == 401:
                        st.error(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è {name}: –ù–µ–≤–µ—Ä–Ω—ã–π API-–∫–ª—é—á OpenWeatherMap.")
                    else:
                        st.error(f"–û—à–∏–±–∫–∞ HTTP ({e.response.status_code}) –¥–ª—è {name}: {e.response.text}")
                except Exception as e:
                    st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {name}: {str(e)}")
